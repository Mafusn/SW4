options {
  STATIC = false;
}

PARSER_BEGIN(Compiler)

import AST.*;
import AST.CodeGeneration.CodeGenerator;
import AST.Nodes.*;
import AST.SymbolTableFilling.SymbolTableFilling;

public class Compiler {
    public static void main(String[] args) {
        try {
            Compiler compiler = new Compiler(new java.io.FileReader("code.txt"));
            Node prog = compiler.Prog();

            PrettyPrint prettyPrint = new PrettyPrint();
            SymbolTableFilling symbolTableFilling = new SymbolTableFilling();
            TypeChecking typeChecking = new TypeChecking(symbolTableFilling);
            CodeGenerator codeGenerator = new CodeGenerator(symbolTableFilling);

            prog.accept(prettyPrint);
            System.out.println(prettyPrint.getResult());
            System.out.println();
            System.out.print("Syntax is good");
            prog.accept(symbolTableFilling);
            System.out.println("Symbol table is good");
            prog.accept(typeChecking);
            System.out.println("Type check is good");
            prog.accept(codeGenerator);
            System.out.println("Code generator is good");

            codeGenerator.generateCode();

        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax error: " + e.getMessage());
        }
    }
}

PARSER_END(Compiler)

SKIP: /* SKIP */
{ " "
| "\t"
| "\n"
| "\r"
| <COMMENT : "/*" (~["/"] | "/" ~["/"])* "*/" >
}

TOKEN : /* NUMBERS AND ARITHMETIC OPERATIONS */
{ <INTDCL: "int">
| <INT: ( < DIGIT > )>
| <FLOATDCL: "float">
| <FLOAT: ( < DIGIT > ) (".") ( < DIGIT > )+ >
| <#DIGIT: ( "0" | ["1"-"9"] ( ["0"-"9"] )* ) >
| <PLUS: "+">
| <MINUS: "-">
| <MULTIPLY: "*">
}

TOKEN: /* LOGIC */
{ <IF: "if">
| <ELSE: "else">
| <AND: "&&">
| <OR: "||">
| <NOT: "!">
| <EQ: "==">
| <NE: "!=">
| <LT: "<">
| <LE: "<=">
| <GT: ">">
| <GE: ">=">
| <BOOLDCL: "boolean">
| <TRUE: "true" >
| <FALSE: "false" >
}

TOKEN : /* ASSIGNMENT OPERATION AND BASIC CONTROL STRUCTURE */
{ <ASSIGN: "=">
| <LPAREN: "(">
| <RPAREN: ")">
| <LBRACE: "{">
| <RBRACE: "}">
| <END_OF_LINE: ";">
| <END_OF_FILE: "BYE">
| <ADDRESS: "&">
}

TOKEN : /* ID */
{ <ID: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "_", "0"-"9"])*> }


Node Prog() :
{
 Prog prog = new Prog();
 Node stmt = null;
 }
{( stmt = Stmt() { prog.addChild(stmt); } )* < END_OF_FILE > < END_OF_LINE >
{
    return prog;
}
}

Node Dcl() :
{
 boolean hasExpr = false;
 boolean isPointer = false;
 Node expr = null;
 Token t;
 }
{ < FLOATDCL > t = < ID > ( < ASSIGN > expr = Expr() { hasExpr = true; } )?
{
    /*if (hasExpr && isPointer) {
       return null;
       } else */

   if (hasExpr) {
       FloatDcl floatDcl = new FloatDcl(t.image);
       return new AssignmentOp(t.image, floatDcl, expr);
   } else {
       return new FloatDcl(t.image);
   }
}
| < INTDCL > t = < ID > ( < ASSIGN > expr = Expr() { hasExpr = true; } )?
{
     /*if (hasExpr && isPointer) {
        return null;
        } else */
    if (hasExpr) {
        IntDcl intDcl = new IntDcl(t.image);
        return new AssignmentOp(t.image, intDcl, expr);
    } else {
        return new IntDcl(t.image);
    }
}
| < BOOLDCL > t = < ID > ( < ASSIGN > expr = Expr() { hasExpr = true; } )?
{
    /*if (hasExpr && isPointer) {
    return null;
    ( < MULTIPLY > { isPointer = true; } )?
    } else */
    if (hasExpr) {
        BoolDcl boolDcl = new BoolDcl(t.image);
        return new AssignmentOp(t.image, boolDcl, expr);
    } else {
        return new BoolDcl(t.image);
    }
}
}

Node Stmt() :
{
    boolean isPointer = false;
    Node ifStmt;
    Node dcl;
    Node expr;
    Token t;
}
{ t = < ID > < ASSIGN > expr = Expr() < END_OF_LINE >
{
/*
( < MULTIPLY > { isPointer = true; } )?
 */
    Id id = new Id(t.image);
    return new AssignmentOp(t.image, id, expr);
}
| ifStmt = IfStmt()
{
return ifStmt;
}
| dcl = Dcl() < END_OF_LINE >
{
    return dcl;
}
}
Node IfStmt() :
{
 Node expr;
 Node ifBlock;
 Node elseBlock = null;
 boolean withElse = false;
}
{
< IF > < LPAREN > expr = Expr() < RPAREN > < LBRACE > ifBlock = Block() < RBRACE > ( < ELSE > < LBRACE > elseBlock = Block() < RBRACE > { withElse = true; })?
{
    if (withElse) {
        return new IfElseStmt(expr, ifBlock, elseBlock);
    } else {
        return new IfStmt(expr, ifBlock);
    }
}
}

Node Block() :
{
   Block block = new Block();
   Node stmt = null;
}
{
( stmt = Stmt() { block.addChild(stmt); } )*
{
    return block;
}
}

Node Expr() :
{
 Node expr;
}
{ expr = OrOp()
{
    return expr;
}
}

Node OrOp() :
{
    boolean hasExpr = false;
    Node andOp;
    Node expr = null;
    Token op = null;
}
{ andOp = AndOp() (( op = <OR> ) expr = Expr() { hasExpr = true; } )?
{
    if (hasExpr) {
        return new ComparisonOp(op.image, andOp, expr);
    } else {
        return andOp;
    }
}
}

Node AndOp() :
{
    boolean hasAndOp = false;
    Node equalityOp;
    Node andOp = null;
    Token op = null;
}
{equalityOp = EqualityOp() (( op = <AND>) andOp = AndOp() {hasAndOp = true;})?
{
    if (hasAndOp) {
        return new ComparisonOp(op.image, equalityOp, andOp);
    } else {
        return equalityOp;
    }
}
}

Node EqualityOp() :
{
    boolean hasEqualityOp = false;
    Node comparisonOp;
    Node equalityOp = null;
    Token op = null;
}
{comparisonOp = ComparisonOp() (( op = <EQ> | op = <NE>) equalityOp = EqualityOp() {hasEqualityOp = true;})?
{
    if (hasEqualityOp) {
        return new ComparisonOp(op.image, comparisonOp, equalityOp);
    } else {
        return comparisonOp;
    }
}
}

Node ComparisonOp() :
{
    boolean hasComparisonOp = false;
     Node arithmeticOp;
     Node comparisonOp = null;
     Token op = null;
 }
{arithmeticOp = ArithmeticOp() (( op = <LT> | op = <GT> | op = <GE> | op = <LE> )comparisonOp = ComparisonOp() { hasComparisonOp = true; })?
{
    if (hasComparisonOp) {
        return new ComparisonOp(op.image, arithmeticOp, comparisonOp);
    } else {
        return arithmeticOp;
    }
}
}

Node ArithmeticOp() :
{
    boolean hasArithmeticOp = false;
    Node negationOp;
    Node arithmeticOp = null;
    Token op = null;
 }
{ negationOp = NegationOp() ((op = <PLUS> | op = <MINUS> ) arithmeticOp = ArithmeticOp() { hasArithmeticOp = true; })?
{
    if (hasArithmeticOp) {
        return new ArithmeticOp(op.image, negationOp, arithmeticOp);
    } else {
        return negationOp;
    }
}

}
Node NegationOp() :
{
    Node factor;
    boolean hasNegationOp = false;
}
{
 ( <NOT> { hasNegationOp = true; })? factor = Factor()
{
    if (hasNegationOp) {
        return new NegationOp(factor);
    } else {
        return factor;
    }
}
}

Node Factor() :
{
    Node val;
    Node expr;
 }
{ <LPAREN> expr = Expr() <RPAREN>
{
    return expr;
}
| val = Val()
{
    return val;
}
}

Node Val() :
{
    Token t;
 }
{ t = < INT >
{
    return new IntNum(t.image);
}
| t = < FLOAT >
{
    return new FloatNum(t.image);
}
| t = < ID >
{
    return new Id(t.image);
}
| (t = < TRUE > | t = < FALSE >)
{
    return new Bool(t.image);
}
/*
| < ADDRESS > t = < ID >
{
    return new Bool(t.image);
}

 */
}

