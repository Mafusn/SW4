PARSER_BEGIN(Parser)

import AST.*;

public class Parser {
   public static void main(String[] args) {
       Visitor v = new PrettyPrint();

       try {
           new Parser(new java.io.FileReader("code.txt")).prog(v);

           System.out.println("Syntax is good");
       } catch (Throwable e) {
           // Catching Throwable is ugly but JavaCC throws Error objects!
           System.out.println("Syntax error: " + e.getMessage());
       }
   }
}

PARSER_END(Parser)

SKIP:
{ " "
| "\t"
| "\n"
| "\r"
| <COMMENT : "/*" (~["/"] | "/" ~["/"])* "*/" >
}

TOKEN : /* Numbers */
{ <INTDCL: "int">
| <INT: ( < DIGIT > )>
| <FLOATDCL: "float">
| <FLOAT: ( < DIGIT > ) (".") ( < DIGIT > )>
| <#DIGIT: ( "0" | ["1"-"9"] ( ["0"-"9"] )* ) >
| <PLUS: "+">
| <MINUS: "-">
}

TOKEN: /* LOGIC */
{ <IF: "if">
| <ELSE: "else">
| <LBRACE: "{">
| <RBRACE: "}">
| <AND: "&&">
| <OR: "||">
| <NOT: "!">
| <EQ: "==">
| <NE: "!=">
| <LT: "<">
| <LE: "<=">
| <GT: ">">
| <GE: ">=">
| <BOOLDCL: "boolean">
| <TRUE: "true" >
| <FALSE: "false" >
}

TOKEN : /* Operators and constructs */
{ <ASSIGN: "=">
| <LPAREN: "(">
| <RPAREN: ")">
/*
| <LCURL: "{">
| <RCURL: "}">
*/
| <END_OF_LINE: ";">
| <END_OF_FILE: "BYE">
| <PRINT: "print">
}


TOKEN : /* ID */
{ <ID: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "_", "0"-"9"])*> }

void prog(Visitor v) :
{Node progNode = new ProgNode();
progNode.accept(v);}
{ ( ( dcl(v) | stmt(v) ) )* end_of_file() }

void dcl(Visitor v) :
{ Node nodeDCL = new DclNode();
 nodeDCL.accept(v);
 }
{
( < FLOATDCL > | < INTDCL > | < BOOLDCL > ) < ID > ( < ASSIGN > val(v) ( expr(v) )? )? < END_OF_LINE >
}

void stmt(Visitor v) :
{Node stmtDCL = new StmtNode();
  stmtDCL.accept(v);}
{ < ID > < ASSIGN > val(v) ( expr(v) )? < END_OF_LINE >
| < PRINT > < LPAREN > < ID > < RPAREN > < END_OF_LINE >
| ifStmt(v)
}

void val(Visitor v) :
{   Node valDCL = new ValNode();
    valDCL.accept(v);
    // Check for consecutive MINUS tokens
    Token nextToken = getToken(1);
    if (token.image.equals("-") && nextToken.image.equals("-")) {
        throw new ParseException("Encountered more than one '-' at line " + token.beginLine + ", column " + token.beginColumn + '.');
    }
}
{ ( < MINUS > )? ( < INT > | < FLOAT > )
| < TRUE >
| < FALSE >
| < LPAREN > ( < MINUS > )? ( < INT > | < FLOAT > ) < RPAREN >
| < ID >
}

void expr(Visitor v) :
{}
{ ( < PLUS > | < MINUS > | < LT > | < GT > | < GE > | < LE > ) val(v) ( expr(v) )? }

void ifStmt(Visitor v) :
{}
{ < IF > < LPAREN > condition() < RPAREN > < LBRACE > stmt(v) < RBRACE > ( < ELSE > < LBRACE > stmt(v) < RBRACE >)? }

void condition() :
{}
{ comparison() ( conditionTail() )? }

void conditionTail() :
{}
{ < AND > comparison() ( conditionTail() )?
| < OR > comparison() ( conditionTail() )?
}

void comparison() :
{}
{ term() ( comparisonTail() )? }

void comparisonTail() :
{}
{ ( < EQ > | < NE > | < LT > | < LE > | < GT > | < GE > ) term() ( comparisonTail() )? }

void term() :
{}
{ factor() ( termTail() )? }

void termTail() :
{}
{ ( < PLUS > | < MINUS > ) factor() ( termTail() )? }

void factor() :
{}
{ < INT >
| < FLOAT >
| < LPAREN > term() < RPAREN >
| < ID >
| < TRUE >
| < FALSE >
}

void end_of_file() :
{System.out.println("BYE!");}
{ < END_OF_FILE > < END_OF_LINE > }

