PARSER_BEGIN(Parser)

import AST.*;

public class Parser {
   public static void main(String[] args) {
       Visitor prettyPrint = new PrettyPrint();

       try {
           new Parser(new java.io.FileReader("code.txt")).prog(prettyPrint);

           System.out.println("Syntax is good");
       } catch (Throwable e) {
           // Catching Throwable is ugly but JavaCC throws Error objects!
           System.out.println("Syntax error: " + e.getMessage());
       }
   }
}

PARSER_END(Parser)

SKIP:
{ " "
| "\t"
| "\n"
| "\r"
| <COMMENT : "/" (~["/"] | "/" ~["/"])* "*/" >
}

TOKEN : /* Numbers */
{  <INTDCL: "int">
 | <INT: ( < DIGIT > )>
 | <FLOATDCL: "float">
 | <FLOAT: ( < MINUS > )? ( < DIGIT > )+ (".") ( < DIGIT > )+>
 | <#DIGIT: ( "0" | ["1"-"9"] ( ["0"-"9"] )* ) >
 | <PLUS: "+">
 | <MINUS: "-">
}


TOKEN: /* LOGIC */
{  <RARROW: ">">
 | <LARROW: "<">
 | <BOOLDCL: "bool">
 | <TRUE: "true" >
 | <FALSE: "false" >
}

TOKEN : /* Operators and constructs */
{ <ASSIGN: "=">
 | <LPAREN: "(">
 | <RPAREN: ")">
 /*
 | <LCURL: "{">
 | <RCURL: "}">
 */
 | <EOL: ";">
 | <END_OF_FILE: "BYE">
 | <PRINT: "print">
}


TOKEN : /* ID */
{ <ID: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "_", "0"-"9"])*> }


void prog(Visitor prettyPrint) :
{Node progNode = new ProgNode();
progNode.accept(prettyPrint);}
{ ( ( dcl(prettyPrint) | stmt(prettyPrint) ) < EOL > )* end_of_file() <EOL>}

void dcl(Visitor prettyPrint) :
{ Node nodeDCL = new DclNode();
 nodeDCL.accept(prettyPrint);
 }
{
( < FLOATDCL > | < INTDCL > | < BOOLDCL > ) < ID > ( < ASSIGN > val(prettyPrint) ( expr(prettyPrint) )? )?
}

void stmt(Visitor prettyPrint) :
{Node stmtDCL = new StmtNode();
  stmtDCL.accept(prettyPrint);
  }
{ < ID > < ASSIGN > val(prettyPrint) ( expr(prettyPrint) )?
| < PRINT > < LPAREN > < ID > < RPAREN >
}

void val(Visitor prettyPrint) :
{    Node valDCL = new ValNode();
       valDCL.accept(prettyPrint);
     // Check for consecutive MINUS tokens
     Token nextToken = getToken(1);
     if (token.image.equals("-") && nextToken.image.equals("-")) {
       throw new ParseException("Encountered '--' at line " + token.beginLine + ", column " + token.beginColumn + '.');
     }
}
{ (<MINUS>)? ( < INT > | < FLOAT > )
| < TRUE > | < FALSE >
/*
| < LPAREN > expr() < RPAREN >
 */
| < ID >
}


void expr(Visitor prettyPrint) :
{
    Node exprDCL = new ExprNode();
    exprDCL.accept(prettyPrint);
}
{
( < PLUS > | < MINUS > | ( < LARROW > ( < ASSIGN > )? ) | ( < RARROW > ( < ASSIGN > )? ) ) val(prettyPrint) ( expr(prettyPrint) )?
}

void end_of_file() :
{System.out.println("BYE!");}
{
 < END_OF_FILE >
}
