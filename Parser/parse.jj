PARSER_BEGIN(Parser)

import AST.*;

public class Parser {
   public static void main(String[] args) {
       Visitor v = new PrettyPrint();

       try {
           new Parser(new java.io.FileReader("code.txt")).prog(v);

           System.out.println("Syntax is good");
       } catch (Throwable e) {
           // Catching Throwable is ugly but JavaCC throws Error objects!
           System.out.println("Syntax error: " + e.getMessage());
       }
   }
}

PARSER_END(Parser)

SKIP:
{ " "
| "\t"
| "\n"
| "\r"
| <COMMENT : "/*" (~["/"] | "/" ~["/"])* "*/" >
}

TOKEN : /* Numbers */
{ <INTDCL: "int">
| <INT: ( < DIGIT > )>
| <FLOATDCL: "float">
| <FLOAT: ( < DIGIT > ) (".") ( < DIGIT > )>
| <#DIGIT: ( "0" | ["1"-"9"] ( ["0"-"9"] )* ) >
| <PLUS: "+">
| <MINUS: "-">
}

TOKEN: /* LOGIC */
{ <IF: "if">
| <ELSE: "else">
| <AND: "&&">
| <OR: "||">
| <NOT: "!">
| <EQ: "==">
| <NE: "!=">
| <LT: "<">
| <LE: "<=">
| <GT: ">">
| <GE: ">=">
| <BOOLDCL: "boolean">
| <TRUE: "true" >
| <FALSE: "false" >
}

TOKEN : /* Operators and constructs */
{ <ASSIGN: "=">
| <LPAREN: "(">
| <RPAREN: ")">
| <LBRACE: "{">
| <RBRACE: "}">
| <END_OF_LINE: ";">
| <END_OF_FILE: "BYE">
| <PRINT: "print">
}

TOKEN : /* ID */
{ <ID: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "_", "0"-"9"])*> }

/*
void prog(Visitor v) :
{Node progNode = new ProgNode();
progNode.accept(v);}
{ ( ( dcl(v) | stmt(v) ) )* end_of_file() }

void dcl(Visitor v) :
{ Node nodeDCL = new DclNode();
 nodeDCL.accept(v);
 }
{
( < FLOATDCL > | < INTDCL > | < BOOLDCL > ) < ID > ( < ASSIGN > val(v) ( expr(v) )? )? < END_OF_LINE >
}

void stmt(Visitor v) :
{Node stmtDCL = new StmtNode();
  stmtDCL.accept(v);}
{ < ID > < ASSIGN > val(v) ( expr(v) )? < END_OF_LINE >
| < PRINT > < LPAREN > < ID > < RPAREN > < END_OF_LINE >
| ifStmt(v)
}

void val(Visitor v) :
{   Node valDCL = new ValNode();
    valDCL.accept(v);
*/
void prog() :
{}
{ ( ( dcl() | stmt() ) )* end_of_file() end_of_line() }

void dcl() :
{}
{
type() id() ( assign() val() ( expr() )? )? end_of_line()
}

void type() :
{}
{ intdcl()
| floatdcl()
| booldcl()
}

void stmt() :
{}
{ id() assign() val() ( expr() )? end_of_line()
| printStmt()
| ifStmt()
}

void printStmt() :
{}
{ print() lParen() id() rParen() end_of_line() }

void val() :
{
    // Check for consecutive MINUS tokens
    Token nextToken = getToken(1);
    if (token.image.equals("-") && nextToken.image.equals("-")) {
        throw new ParseException("Encountered more than one '-' at line " + token.beginLine + ", column " + token.beginColumn + '.');
    }
}
{ ( minus() )? ( intToken() | floatToken() )
| trueToken()
| falseToken()
| lParen() ( minus() )? ( intToken() | floatToken() ) rParen()
| id()
}

void expr(Visitor v) :
{}
/*
{ ( < PLUS > | < MINUS > | < LT > | < GT > | < GE > | < LE > ) val(v) ( expr(v) )? }
*/
{ ( plus() | minus() | lt() | gt() | ge() | le() ) val() ( expr() )? }


void ifStmt(Visitor v) :
{}
/*
{ < IF > < LPAREN > condition() < RPAREN > < LBRACE > stmt(v) < RBRACE > ( < ELSE > < LBRACE > stmt(v) < RBRACE >)? }
*/
{ ifToken() lParen() condition() rParen() lBrace() stmt() rBrace() ( elseToken() lBrace() stmt() rBrace() )? }

void condition() :
{}
{ comparison() ( conditionTail() )? }

void conditionTail() :
{}
{ and() comparison() ( conditionTail() )?
| or() comparison() ( conditionTail() )?
}

void comparison() :
{}
{ term() ( comparisonTail() )? }

void comparisonTail() :
{}
{ ( eq() | ne() | lt() | le() | gt() | ge() ) term() ( comparisonTail() )? }

void term() :
{}
{ factor() ( termTail() )? }

void termTail() :
{}
{ ( plus() | minus() ) factor() ( termTail() )? }

void factor() :
{}
{ intToken()
| floatToken()
| lParen() term() rParen()
| id()
| trueToken()
| falseToken()
}

/* terminals */

void lParen() :
{}
{ < LPAREN > }

void rParen() :
{}
{ < RPAREN > }

void lBrace() :
{}
{ < LBRACE > }

void rBrace() :
{}
{ < RBRACE > }

void print() :
{}
{ < PRINT > }

void and() :
{}
{ < AND > }

void or() :
{}
{ < OR > }

void eq() :
{}
{ < EQ > }

void ne() :
{}
{ < NE > }

void lt() :
{}
{ < LT > }

void gt() :
{}
{ < GT > }

void ge() :
{}
{ < GE > }

void le() :
{}
{ < LE > }

void minus() :
{}
{ < MINUS > }

void plus() :
{}
{ < PLUS > }

void ifToken() :
{}
{ < IF > }

void elseToken() :
{}
{ < ELSE > }

void intdcl() :
{}
{ < INTDCL > }

void floatdcl() :
{}
{ < FLOATDCL > }

void booldcl() :
{}
{ < BOOLDCL > }

void intToken() :
{}
{ < INT > }

void floatToken() :
{}
{ < FLOAT > }

void trueToken() :
{}
{ < TRUE > }

void falseToken() :
{}
{ < FALSE > }

void id() :
{}
{ < ID > }

void assign() :
{}
{ < ASSIGN > }

void end_of_line() :
{}
{ < END_OF_LINE > }

void end_of_file() :
/*
{System.out.println("BYE!");}
{ < END_OF_FILE > < END_OF_LINE > }
*/
{}
{ < END_OF_FILE > }

