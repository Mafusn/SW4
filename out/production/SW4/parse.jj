PARSER_BEGIN(Parser)

import AST.*;

public class Parser {
   public static void main(String[] args) {
       Visitor v = new PrettyPrint();

       try {
           Parser parser = new Parser(new java.io.FileReader("code.txt"));
           ProgNode root = parser.prog(v);
           root.accept(v);

           System.out.println("Syntax is good");
       } catch (Throwable e) {
           // Catching Throwable is ugly but JavaCC throws Error objects!
           System.out.println("Syntax error: " + e.getMessage());
       }
   }
}

PARSER_END(Parser)

SKIP:
{ " "
| "\t"
| "\n"
| "\r"
| <COMMENT : "/*" (~["/"] | "/" ~["/"])* "*/" >
}

TOKEN : /* Numbers */
{ <INTDCL: "int">
| <INT: ( < DIGIT > )>
| <FLOATDCL: "float">
| <FLOAT: ( < DIGIT > ) (".") ( < DIGIT > )>
| <#DIGIT: ( "0" | ["1"-"9"] ( ["0"-"9"] )* ) >
| <PLUS: "+">
| <MINUS: "-">
}

TOKEN: /* LOGIC */
{ <IF: "if">
| <ELSE: "else">
| <AND: "&&">
| <OR: "||">
| <NOT: "!">
| <EQ: "==">
| <NE: "!=">
| <LT: "<">
| <LE: "<=">
| <GT: ">">
| <GE: ">=">
| <BOOLDCL: "boolean">
| <TRUE: "true" >
| <FALSE: "false" >
}

TOKEN : /* Operators and constructs */
{ <ASSIGN: "=">
| <LPAREN: "(">
| <RPAREN: ")">
| <LBRACE: "{">
| <RBRACE: "}">
| <END_OF_LINE: ";">
| <END_OF_FILE: "BYE">
| <PRINT: "print">
}

TOKEN : /* ID */
{ <ID: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "_", "0"-"9"])*> }

ProgNode prog(Visitor v) :
{
    ProgNode prog = new ProgNode();
    DclNode dcl = null;
    StmtNode stmt = null;
}
{ ( ( dcl = dcl(v) { prog.addChild(dcl); } | stmt = stmt(v) { prog.addChild(stmt); } ) )* end_of_file() end_of_line()
{
    return prog;
}
}

DclNode dcl(Visitor v) :
{
    TypeNode type;
    IdNode id;
    ValNode val = null;
    AssignNode assign = null;
    ExprNode expr = null;
}
{
    type = type(v) id = id() ( assign = assign() val = val(v) ( expr = expr(v) )? )? end_of_line()
    {
        return new DclNode(type, id, val, assign, expr);
    }
}


TypeNode type(Visitor v) :
{
    IntDclNode intDcl;
    FloatDclNode floatDcl;
    BoolDclNode boolDcl;
}
{ intDcl = intdcl(v)
{
    return new TypeNode(intDcl);
}
| floatDcl = floatdcl(v)
{
    return new TypeNode(floatDcl);
}
| boolDcl = booldcl(v)
{
    return new TypeNode(boolDcl);
}
}

StmtNode stmt(Visitor v) :
{
    IdNode id = null;
    ValNode val = null;
    AssignNode assign = null;
    ExprNode expr = null;
    PrintStmtNode printStmt = null;
    IfStmtNode ifStmt = null;
}
{ id = id() assign = assign() val = val(v) ( expr = expr(v) )? end_of_line()
{
    return new StmtNode(id, assign, val, expr);
}
| printStmt = printStmt(v)
{
    return new StmtNode(printStmt);
}
| ifStmt = ifStmt(v)
{
    return new StmtNode(ifStmt);
}
}

PrintStmtNode printStmt(Visitor v) :
{
     PrintNode print;
     LParenNode lParen;
     IdNode id;
     RParenNode rParen;
}
{
    print = print() lParen = lParen() id = id() rParen = rParen() end_of_line()
    {
        return new PrintStmtNode(print, lParen, id, rParen);
    }
}

ValNode val(Visitor v) :
{
    MinusNode minus = null;
    IntNode intNode = null;
    FloatNode floatNode = null;
    TrueNode trueNode = null;
    FalseNode falseNode = null;
    LParenNode lParen = null;
    RParenNode rParen = null;
    IdNode id = null;
    // Check for consecutive MINUS tokens
    Token nextToken = getToken(1);
    if (token.image.equals("-") && nextToken.image.equals("-")) {
        throw new ParseException("Encountered more than one '-' at line " + token.beginLine + ", column " + token.beginColumn + '.');
    }
}
{ ( minus = minus() )? ( intNode = intToken() | floatNode = floatToken() )
{
    return new ValNode(minus, intNode, floatNode);
}
| trueNode = trueToken()
{
    return new ValNode(trueNode);
}
| falseNode = falseToken()
{
    return new ValNode(falseNode);
}
| lParen = lParen() ( minus = minus() )? ( intNode = intToken() | floatNode = floatToken() ) rParen = rParen()
{
    return new ValNode(lParen, minus, intNode, floatNode, rParen);
}
| id = id()
{
    return new ValNode(id);
}
}

ExprNode expr(Visitor v) :
{
    PlusNode plus = null;
    MinusNode minus = null;
    LTNode ltNode = null;
    GTNode gtNode = null;
    GENode geNode = null;
    LENode leNode = null;
    ValNode val = null;
    ExprNode expr = null;
}
{ ( plus = plus() | minus = minus() | ltNode = lt() | gtNode = gt() | geNode = ge() | leNode = le() ) val = val(v) ( expr = expr(v) )?
{
    return new ExprNode(plus, minus, ltNode, gtNode, geNode, leNode, val, expr);
}
}


IfStmtNode ifStmt(Visitor v) :
{
    IfNode ifNode = null;
    LParenNode lParen = null;
    ConditionNode condition = null;
    RParenNode rParen = null;
    LBraceNode lBrace = null;
    StmtNode stmt = null;
    RBraceNode rBrace = null;
    ElseNode elseNode = null;
    LBraceNode lBrace2 = null;
    StmtNode stmt2 = null;
    RBraceNode rBrace2 = null;
}
{ ifNode = ifToken() lParen = lParen() condition = condition() rParen = rParen() lBrace = lBrace() stmt = stmt(v) rBrace = rBrace()
( elseNode = elseToken() lBrace2 = lBrace() stmt2 = stmt(v) rBrace2 = rBrace() )?
{
    return new IfStmtNode(ifNode, lParen, condition, rParen, lBrace, stmt, rBrace, elseNode, lBrace2, stmt2, rBrace2);
}

}

ConditionNode condition() :
{
    ComparisonNode comparison = null;
    ConditionTailNode conditionTail = null;
}
{ comparison = comparison() ( conditionTail = conditionTail() )?
{
    return new ConditionNode(comparison, conditionTail);
}
}

ConditionTailNode conditionTail() :
{
    ANDNode andNode = null;
    ORNode orNode = null;
    ComparisonNode comparison = null;
    ConditionTailNode conditionTail = null;
}
{ andNode = and() comparison = comparison() ( conditionTail = conditionTail() )?
{
    return new ConditionTailNode(andNode, comparison, conditionTail);
}
| orNode = or() comparison = comparison() ( conditionTail = conditionTail() )?
{
    return new ConditionTailNode(orNode, comparison, conditionTail);
}
}

ComparisonNode comparison() :
{
    TermNode term = null;
    ComparisonTailNode comparisonTail = null;
 }
{ term = term() ( comparisonTail = comparisonTail() )?
{
    return new ComparisonNode(term, comparisonTail);
}
}

ComparisonTailNode comparisonTail() :
{
    EQNode eq = null;
    NENode ne = null;
    LTNode lt = null;
    LENode le = null;
    GTNode gt = null;
    GENode ge = null;
    TermNode term = null;
    ComparisonTailNode comparisonTail = null;
 }
{ ( eq = eq() | ne = ne() | lt = lt() | le = le() | gt = gt() | ge = ge() ) term = term() ( comparisonTail = comparisonTail() )?
{
    return new ComparisonTailNode(eq, ne, lt, le, gt, ge, term, comparisonTail);
}
}

TermNode term() :
{
    FactorNode factor = null;
    TermTailNode termTail = null;
 }
{ factor = factor() ( termTail = termTail() )?
{
    return new TermNode(factor, termTail);
}
}

TermTailNode termTail() :
{
    PlusNode plus = null;
    MinusNode minus = null;
    FactorNode factor = null;
    TermTailNode termTail = null;
 }
{ ( plus = plus() | minus = minus() ) factor = factor() ( termTail = termTail() )?
{
    return new TermTailNode(plus, minus, factor, termTail);
}
}

FactorNode factor() :
{
    IntNode intNode = null;
    FloatNode floatNode = null;
    LParenNode lParen = null;
    TermNode term = null;
    RParenNode rParen = null;
    IdNode id = null;
    TrueNode trueNode = null;
    FalseNode falseNode = null;
 }
{ intNode = intToken()
{
    return new FactorNode(intNode);
}
| floatNode = floatToken()
{
    return new FactorNode(floatNode);
}
| lParen = lParen() term = term() rParen = rParen()
{
    return new FactorNode(lParen, term, rParen);
}
| id = id()
{
    return new FactorNode(id);
}
| trueNode = trueToken()
{
    return new FactorNode(trueNode);
}
| falseNode = falseToken()
{
    return new FactorNode(falseNode);
}
}

/* terminals */

LParenNode lParen() :
{}
{ < LPAREN >
    {
        return new LParenNode(token.image);
    }
}

RParenNode rParen() :
{}
{ < RPAREN >
    {
        return new RParenNode(token.image);
    }
}

LBraceNode lBrace() :
{}
{ < LBRACE >
{
    return new LBraceNode(token.image);
}
}

RBraceNode rBrace() :
{}
{ < RBRACE >
{
    return new RBraceNode(token.image);
}
}

PrintNode print() :
{}
{ < PRINT >
    {
        return new PrintNode(token.image);
    }
}

ANDNode and() :
{}
{ < AND >
{
    return new ANDNode(token.image);
}
}

ORNode or() :
{}
{ < OR >
{
    return new ORNode(token.image);
}
}

EQNode eq() :
{}
{ < EQ >
{
    return new EQNode(token.image);
}
}

NENode ne() :
{}
{ < NE >
{
    return new NENode(token.image);
}
}

LTNode lt() :
{}
{ < LT >
{
    return new LTNode(token.image);
}
}

GTNode gt() :
{}
{ < GT >
{
    return new GTNode(token.image);
}
}

GENode ge() :
{}
{ < GE >
{
    return new GENode(token.image);
}
}

LENode le() :
{}
{ < LE >
{
    return new LENode(token.image);
}
}

MinusNode minus() :
{}
{ < MINUS >
{
    return new MinusNode(token.image);
}
}


PlusNode plus() :
{}
{ < PLUS >
{
    return new PlusNode(token.image);
}
}

IfNode ifToken() :
{}
{ < IF >
{
    return new IfNode(token.image);
}
}

ElseNode elseToken() :
{}
{ < ELSE >
{
    return new ElseNode(token.image);
}
}

IntDclNode intdcl(Visitor v) :
{}
{ < INTDCL >
{
    return new IntDclNode(token.image);
}
}

FloatDclNode floatdcl(Visitor v) :
{}
{ < FLOATDCL >
{
    return new FloatDclNode(token.image);
}
}

BoolDclNode booldcl(Visitor v) :
{}
{ < BOOLDCL >
{
    return new BoolDclNode(token.image);
}
}

IntNode intToken() :
{}
{ < INT >
    {
        return new IntNode(token.image);
    }
}

FloatNode floatToken() :
{}
{ < FLOAT >
    {
        return new FloatNode(token.image);
    }
}

TrueNode trueToken() :
{}
{ < TRUE >
    {
        return new TrueNode(token.image);
    }
}

FalseNode falseToken() :
{}
{ < FALSE >
    {
        return new FalseNode(token.image);
    }
}

IdNode id() :
{}
{
    < ID >
    {
        return new IdNode(token.image);
    }
}

AssignNode assign() :
{}
{
    < ASSIGN >
    {
        return new AssignNode(token.image);
    }
}

void end_of_line() :
{}
{ < END_OF_LINE > }

void end_of_file() :
{}
{ < END_OF_FILE > }

